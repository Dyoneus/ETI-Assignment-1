Change Log

All notable changes to this project will be documented in this file.
[2.0.2] - 16/12/2023
- Add functionality to update user profile including first name, last name, and mobile number.
- Introduce current password verification step before allowing profile updates to enhance security.
- Ensure the mobile number is validated as an integer before submission.
- Modify frontend logic to separate the update of mobile numbers using a dedicated endpoint.
- Refactor form submission handler to prevent profile updates if mobile number is invalid.
- Update session storage upon successful profile update to reflect changes immediately.
- Add front-end functionality to fetch and display past trips for both car owners and passengers.
- Sort retrieved trips in reverse chronological order before display.
- Ensure error handling for fetch requests to handle server or network issues.
- Update Go server handlers to provide routes for retrieving past trips based on user roles.
- Fix URL construction in JavaScript fetch calls to match the server's expected endpoints.
- Test and verify that past trips are correctly displayed in the user interface.

[2.0.1] - 15/12/2023
- Includes HTML files for user authentication, main menu navigation, profile management, and trip browsing/enrollment. 
- JavaScript files are added for handling AJAX calls to the backend services, managing session state, and dynamically updating the UI based on user interactions. 
- Added gorilla/handlers package to handle Cross-Origin Resource Sharing (CORS).
- Configured the CORS middleware to allow all origins for development convenience.
- Integrated the CORS middleware into the HTTP server setup.
- Added validation to ensure trip start times are set at least 30 minutes into the future.
- Included logic to retrieve car owner details from the user session and add them to the trip data before publishing.
- Fixed issues with form submission to prevent premature closure and ensure trip data is sent to the backend correctly.
- The user interface has been updated to include a cancel button next to each enrolled trip. Upon clicking, the cancellation is processed, and the user receives a confirmation message. Error handling is in place to notify users of any issues during the process.

[2.0.0] - 15/12/2023
This commit introduces the foundational for the frontend aspect of the Car Pooling Service application. 

- An index.html file has been created to serve as the entry point to the application, along with accompanying CSS and JavaScript files to manage the presentation and interactive behavior of the application.
- The file structure is organized into separate folders for stylesheets (css) and scripts (js) to promote clean code organization and ease of development as the project grows.
- No functionality has been linked between the frontend and the backend services at this stage. 
- The next steps will include implementing AJAX calls to interact with the Go backend services for user authentication, trip browsing, enrollment, and management.

[1.1.3] - 14/12/2023
- Implemented a new HTTP handler `GetPastTripsForPassenger` to retrieve all past trips associated with a passenger, including those that are soft-deleted. 
- This handler responds to GET requests at the `/past-trips/passenger` endpoint with the `passengerID` as a query parameter.
- Updated the `main.go` in the trip-service to register the new route and modified the `viewPastTripsForPassenger` function in the console app to utilize the new endpoint correctly.
- This feature allows passengers to view a complete history of their trips, ensuring better transparency and record-keeping.
- Implemented direct call to loginOrSignUp function upon logout in showMainMenu
- Ensured that the user is immediately prompted for login or signup after logging out
- Altered logout logic to reset session and handle user redirection seamlessly
- Updated showMainMenu to accommodate the new flow for both car owner and passenger types

[1.1.2] - 14/12/2023
- Implement the 'viewEnrolledTrips' function in the console application.
- Create an endpoint in the trip service to handle fetching of enrolled trips by passenger ID.
- Update the console app to make an HTTP GET request to retrieve and display trips where the user is enrolled.
- Ensure the response handling includes cases for no trips found and potential errors.

[1.1.1] - 14/12/2023
 - Fixed type mismatch in already.
 - Enrolled function and ensured each passenger can only enroll once per trip. 
 - Transaction handling in enroll function ensures data integrity for seat reservation and counts.

[1.1.0] - 14/12/2023
- Implemented a new endpoint `/available-trips` that lists all non-deleted trips with available seats. 
- This allows passengers to browse through all currently available trips they can enroll in. 
- The endpoint filters trips using the `deleted_at IS NULL AND available_seats > 0` condition, ensuring only active and open trips are shown.

Modified the handlers and route configurations to serve the new endpoint. The Trip model's soft deletion and available seats features are utilized to provide the correct data.

[1.0.9] - 14/12/2023
- Implemented the 'viewPastTrips' function in the main console application, enabling users to list all trips that have been soft-deleted. 
- Fetches the past trips from the backend server and displays them to the user with relevant details such as Trip ID, pickup location, destination, and scheduled time. 
- Ensured error handling for server responses and empty lists, and provided a smooth return flow to the main menu after viewing the trips.
- Auto-schedule to delete trips that is overdue

[1.0.8] - 14/12/2023
- Add ability to edit trip details including pick-up location, destination, and available seats.
- Implement trip deletion with confirmation.
- Resolve 404 error by correctly mapping trip ID in the request URL.
- Ensure robust error handling for trip management operations.

The commit includes necessary route adjustments in the trip service to accept trip IDs and updates to the corresponding functions in the console app to construct proper requests.

[1.0.7] - 14/12/2023
Introduces the ability for car owners to publish new trips.
The Trip model has been updated to include the `CarOwnerName` and `PickUpLocation` fields, ensuring that all necessary trip information is captured and stored.

Key changes include:
- Updated the Trip struct with new fields in `trip-service/models/trip.go`.
- Modified the `publishTrip` function in `console-app/main.go` to collect additional
  trip details and pass them to the trip service.
- Enhanced the `PublishTrip` handler in `trip-service/handlers/handlers.go` to handle
  the new fields and create trip records in the database.
- Ensured that the `AutoMigrate` function is called upon application start to reflect
  the new schema in the database.

The database schema has been automatically updated using GORM's `AutoMigrate` feature to include the new fields without the need for manual migrations.

[1.0.6] - 13/12/2023
Initialize Trip Service with Basic Routing and Database Setup

This commit sets up the foundational structure for the Trip Service in our car-pooling platform microservice architecture. It includes:

- Creation of the main.go file with initial route setup using gorilla/mux.
- Configuration of the database connection and auto-migration in database.go.
- A placeholder for future trip publishing functionality in handlers.go, prepared to handle POST requests for '/trips'.
- Basic configuration for starting the server on port 5001 and handling shutdown.

[1.0.5] - 26/11/2023
Added
    - User can now become car owner through signing up
    - Car owner users can now change their license plate
    - Car owner users can now change their driver license number
Changed
    
Fixed
    - User now shown menu for car owner after successfully signing up as car owner
    - Car owner menu now successfully log out

[1.0.4] - 24/11/2023
Added
    - De-activate account function now soft-delete the user session instead of deleting it from the database
Changed
    - Login page now checks for active session logic, otherwise, show main menu
Fixed
    - Error "user.Active undefined" user struc lacks an Active field that the code attempts to access or modify.
    - Error "cannot use &now (type of *time.Time) as type gorm.DeletedAt" indicate a type mismatch.
    - User session not cleared after de-activating account
    - After de-activating account, user is not sent back to the login menu

[1.0.3] - 23/11/2023
Added
    - Added variable session to simulate saved session
    - Add User Name Update Profile
Changed
    
Fixed
    - Fixed HTTP Status code 400, 401, 404, 405 & 500 
    - Name update now PATCH to database

[1.0.2] - 22/11/2023
Added
    - Console Application for User Menu
    - Password for User account's creation
    - Password Hashing for security
    - User information during creation is successfully added to mySQL database
    - User login now extract information from mySQL database for authentication
    - User login now compares hashed password
    - Show userType based menu (Passenger or Car Owner)
Changed

Fixed
    - SignUp handler not saving into information into mySQL database

[1.0.1] - 21/11/2023
Added
    trip-service MAJOR Init main.go
    trip-models PATCH Add Trip and Reservation structure models
    user-models PATCH Add Passenger and CarOwner structure models
    user-handlers PATCH Add handlers to respond HTTP requesst, interacting with the database

    - Import database in main to call 'InitializeDatabase' func
    - Able to now POST to database and create new user
    - Able to now GET user from database to list all users
    - Able to now GET user by ID from database to list all users
    
Changed

Fixed
    user-service & trip-service PATCH Add 'go work init' to FIX 'gopls' error message

[1.0.0] - 10/11/2023
Added
    user-service MAJOR Init main.go

Changed

Fixed